{"ast":null,"code":"var _jsxFileName = \"/Users/brookemadison/Desktop/ucf-bootcamp/react-portfolio/src/components/Project/index.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState } from \"react\";\n// import Modal from '../Modal';\n// import { Button } from 'react-bootstrap'\n// function Project({ category }) {\n//   const [featuredProjects] = useState([\n//     {\n//       index: 0,\n//       name: 'Project Three',\n//       shortdesc: 'Coming soon..',\n//       tech: 'HTML, CSS, JavaScript, Node.js, Express.js, MongoDB, Mongoose ODM, GraphQL, JWT, Heroku',\n//       description: 'description coming soon',\n//       github: 'https://github.com/brookemadison/',\n//     },\n//     {\n//       index: 1,\n//       name: 'Decide Eat',\n//       shortdesc: 'Decide what to eat, drink, and listen to on your date night',\n//       tech: 'HTML, CSS, JavaScript, jQuery, Bulma, Spoonacular API, Spotify API',\n//       description: 'Decide Eat was crafted to offer a unique experience on date night in. This app will elevate your date night by bringing the fun to the comfort of your home. Remove the stress of deciding by taking the quiz that pairs you with a recipe, cocktail, and music playlist recommendation.',\n//       github: 'https://github.com/Padredilg/decide-eat',\n//       deployed: 'https://padredilg.github.io/decide-eat/'\n//     },\n//     {\n//       index: 2,\n//       name: 'Pokedex',\n//       shortdesc: 'An online Pokédex that allows users to view and search for their favorite original 151 Pokémon.',\n//       tech: 'HTML, CSS, JavaScript, Node.js, Express.js, MySQL, dotenv, Heroku, JawsDB, Sequeliz, Bcrypt, express-session, Handlebars, animate.css, PokéAPI',\n//       description: 'The user MUST create an account first by username, email and password. The password MUST be at least 10 characters long. Once logged in, the user is then sent to the dashboard where they are presented with a search form. In this form they may type in the name of any of the original 151 Pokémon. Once the data is sent, the result brings up a card. The Pokémon stats will display along with the username written on the card. Congratulations! You caught your first Pokémon! To do another search simply click on the dashboard button. When you have finished your hunt, you may hit the logout button!',\n//       github: 'https://github.com/Lightfooted/pokedex-project',\n//       deployed: 'https://protected-hamlet-00069.herokuapp.com/'\n//     },\n//   ]);\n//   const [nonFeaturedProjects] = useState([\n//     {\n//       index: 3,\n//       name: 'Budget Tracker',\n//       shortdesc: 'A budget tracker that can be used without an internet connection',\n//       tech: 'HTML, CSS, JavaScript, indexedDb, Service-Workers, manifest.json, express.js, MongoDB, Mongoose',\n//       description: 'Having offline functionality is paramount to the success of an application that handles users’ financial information. This budget tracker application allows for offline access and functionality. The user will be able to add expenses and deposits to their budget with or without a connection. If the user enters transactions offline, the total should be updated when they are brought back online.',\n//       github: 'https://github.com/brookemadison/budget-tracker',\n//       deployed: 'https://lit-reaches-08410.herokuapp.com/'\n//     },\n//   ]);\n//   const [currentProject, setCurrentProject] = useState({});\n//   const [show, setShow] = useState(false);\n//   const handleShow = (currentProj) => {\n//     setCurrentProject(currentProj)\n//     setShow(true);\n//   };\n//   const handleClose = () => setShow(false);\n//   return (\n//     <div>\n//       {/* featured projects */}\n//       <div className=\"projects-wrapper\">\n//         {featuredProjects.map((project, i) => (\n//           <Button\n//             className=\"project-button\"\n//             variant=\"link\"\n//             onClick={() => { handleShow(featuredProjects[i]) }}\n//           >\n//             <img\n//               src={require(`../../assets/projects/${i}.png`).default}\n//               alt={project.name}\n//               className=\"project-image featured-project\"\n//               key={project.name}\n//             />\n//             <div class=\"project-label\">\n//               <h6 className=\"label-title\">{project.name}</h6>\n//               <p className=\"label-description\">{project.shortdesc}</p>\n//               <p className=\"label-read-more\">Click to Read More</p>\n//             </div>\n//           </Button>\n//         ))}\n//       </div>\n//       {/* non-featured-projects */}\n//       <div className=\"projects-wrapper\">\n//         {nonFeaturedProjects.map((project, i) => (\n//           <Button\n//             className=\"project-button\"\n//             variant=\"link\"\n//             onClick={() => { handleShow(nonFeaturedProjects[i]) }}\n//           >\n//             <img\n//               src={require(`../../assets/projects/${project.index}.png`).default}\n//               alt={project.name}\n//               className=\"project-image\"\n//               key={project.name}\n//             />\n//             <div class=\"project-label small-label\">\n//               <h6 className=\"label-title\">{project.name}</h6>\n//               <p className=\"label-description\">{project.shortdesc}</p>\n//               <p className=\"label-read-more\">Click to Read More</p>\n//             </div>\n//           </Button>\n//         ))}\n//       </div>\n//       {show ? <Modal currentProject={currentProject} onClose={handleClose} /> : null}\n//     </div>\n//   )\n// }\n// export default Project;\nimport React, { useState, useCallback, useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Lightbox from \"../Modal/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Grid = ({\n  images,\n  rowHeight,\n  margin = 0,\n  width,\n  isLightboxEnabled = true\n}) => {\n  _s();\n\n  const [showLightbox, setShowLightbox] = useState(false);\n  const [selectedIndex, setSelectedIndex] = useState();\n\n  const handleImageClick = e => {\n    setSelectedIndex(e.target.getAttribute(\"data-index\"));\n    setShowLightbox(true);\n  }; // Creates <img/> tags from image and row metadata.\n  //\n\n\n  const imageDataToImgTag = useCallback((image, totalIndex, rowIndex, row, imageWidth) => {\n    const calculatedRowHeight = width / imageWidth; // Calculate the dimensions and margin of each image. This needs\n    // to be inline since we need some values from the JS.\n\n    let imageStyle = {\n      height: calculatedRowHeight + \"px\",\n      // Take back out the margin from the ratio.\n      width: calculatedRowHeight * image[1] - margin + \"px\",\n      // Don't add margin to the last item in a row\n      marginRight: rowIndex === row.length - 1 ? 0 : margin + \"px\"\n    };\n    return /*#__PURE__*/_jsxDEV(\"img\", {\n      className: `grid-img ${isLightboxEnabled ? \"lightbox-enabled\" : \"\"}`,\n      style: imageStyle,\n      \"data-index\": totalIndex,\n      onClick: isLightboxEnabled ? handleImageClick : undefined,\n      src: image[0].src,\n      alt: image[0].alt\n    }, \"img_\" + image[0].id + \"_\" + image[1], false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this);\n  }, [margin, width, isLightboxEnabled]); // Build the rows of the grid. Each row must have an aspect ratio of at least minAspectRatio.\n  // Then, each image in the row is scaled up to fill the desired width of the row, while maintaining\n  // the aspect ratio of each photo in the row.\n\n  const rows = useMemo(() => {\n    let allRows = [];\n    let row = [];\n    let widthSoFar = 0; // We'll use this value to calculate how many pictures we need in a row.\n    // The \"min\" aspect ratio is the aspect ratio that will allow the row to\n    // span the correct length while being between minRowHeight and maxRowHeight\n\n    const minAspectRatio = width / rowHeight;\n\n    for (let i = 0; i < images.length; i++) {\n      let image = images[i]; // Add the margin into the ratio.\n\n      let ratio = image.width / image.height; // If we're less than the min aspectRatio then keep adding more items to the row.\n\n      if (widthSoFar <= minAspectRatio && i !== images.length - 1) {\n        // Add the ratio contributed by the margin.\n        ratio += margin / image.height;\n        row.push([image, ratio]);\n        widthSoFar += ratio;\n      } else {\n        if (i === images.length - 1) {\n          row.push([image, ratio]);\n          widthSoFar += ratio;\n        }\n\n        let imageElements = [];\n\n        for (let j = 0; j < row.length; j++) {\n          imageElements.push(imageDataToImgTag(row[j], i - row.length + j, j, row, widthSoFar));\n        } // Add the finished row to the list of all rows.\n\n\n        allRows.push(imageElements); // Start a new row with the current image as the first image\n\n        row = [[image, ratio]];\n        widthSoFar = ratio;\n      }\n    } // This style also needs to be inline since we use the padding prop.\n    // (Would be nice to use something like styled-components for this instead)\n\n\n    const divStyle = {\n      display: \"flex\",\n      marginBottom: margin + \"px\"\n    };\n    return allRows.map((row, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      style: divStyle,\n      children: row\n    }, \"row_\" + index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this));\n  }, [width, imageDataToImgTag, images, margin, rowHeight]);\n  const handleClose = useCallback(() => {\n    setShowLightbox(false);\n  }, []);\n  const handlePrev = useCallback(() => {\n    setSelectedIndex(selectedIndex => (+selectedIndex - 1 + images.length) % images.length);\n  }, [images.length]);\n  const handleNext = useCallback(() => {\n    setSelectedIndex(selectedIndex => (+selectedIndex + 1) % images.length);\n  }, [images.length]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: rows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), showLightbox ? /*#__PURE__*/_jsxDEV(Lightbox, {\n      selectedImage: images[selectedIndex],\n      onClose: handleClose,\n      onPrev: handlePrev,\n      onNext: handleNext\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true);\n};\n\n_s(Grid, \"JKbk1imZ09zdMiMEQ3LLMdbF9oA=\");\n\n_c = Grid;\nGrid.propTypes = {\n  images: PropTypes.arrayOf(PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired\n  })).isRequired,\n  rowHeight: PropTypes.number.isRequired,\n  margin: PropTypes.number,\n  isLightboxEnabled: PropTypes.bool\n};\nexport default Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/brookemadison/Desktop/ucf-bootcamp/react-portfolio/src/components/Project/index.js"],"names":["React","useState","useCallback","useMemo","PropTypes","Lightbox","Grid","images","rowHeight","margin","width","isLightboxEnabled","showLightbox","setShowLightbox","selectedIndex","setSelectedIndex","handleImageClick","e","target","getAttribute","imageDataToImgTag","image","totalIndex","rowIndex","row","imageWidth","calculatedRowHeight","imageStyle","height","marginRight","length","undefined","src","alt","id","rows","allRows","widthSoFar","minAspectRatio","i","ratio","push","imageElements","j","divStyle","display","marginBottom","map","index","handleClose","handlePrev","handleNext","propTypes","arrayOf","shape","string","isRequired","number","bool"],"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","sourcesContent":["// import React, { useState } from \"react\";\n// import Modal from '../Modal';\n// import { Button } from 'react-bootstrap'\n\n// function Project({ category }) {\n//   const [featuredProjects] = useState([\n//     {\n//       index: 0,\n//       name: 'Project Three',\n//       shortdesc: 'Coming soon..',\n//       tech: 'HTML, CSS, JavaScript, Node.js, Express.js, MongoDB, Mongoose ODM, GraphQL, JWT, Heroku',\n//       description: 'description coming soon',\n//       github: 'https://github.com/brookemadison/',\n//     },\n//     {\n//       index: 1,\n//       name: 'Decide Eat',\n//       shortdesc: 'Decide what to eat, drink, and listen to on your date night',\n//       tech: 'HTML, CSS, JavaScript, jQuery, Bulma, Spoonacular API, Spotify API',\n//       description: 'Decide Eat was crafted to offer a unique experience on date night in. This app will elevate your date night by bringing the fun to the comfort of your home. Remove the stress of deciding by taking the quiz that pairs you with a recipe, cocktail, and music playlist recommendation.',\n//       github: 'https://github.com/Padredilg/decide-eat',\n//       deployed: 'https://padredilg.github.io/decide-eat/'\n//     },\n//     {\n//       index: 2,\n//       name: 'Pokedex',\n//       shortdesc: 'An online Pokédex that allows users to view and search for their favorite original 151 Pokémon.',\n//       tech: 'HTML, CSS, JavaScript, Node.js, Express.js, MySQL, dotenv, Heroku, JawsDB, Sequeliz, Bcrypt, express-session, Handlebars, animate.css, PokéAPI',\n//       description: 'The user MUST create an account first by username, email and password. The password MUST be at least 10 characters long. Once logged in, the user is then sent to the dashboard where they are presented with a search form. In this form they may type in the name of any of the original 151 Pokémon. Once the data is sent, the result brings up a card. The Pokémon stats will display along with the username written on the card. Congratulations! You caught your first Pokémon! To do another search simply click on the dashboard button. When you have finished your hunt, you may hit the logout button!',\n//       github: 'https://github.com/Lightfooted/pokedex-project',\n//       deployed: 'https://protected-hamlet-00069.herokuapp.com/'\n//     },\n//   ]);\n//   const [nonFeaturedProjects] = useState([\n//     {\n//       index: 3,\n//       name: 'Budget Tracker',\n//       shortdesc: 'A budget tracker that can be used without an internet connection',\n//       tech: 'HTML, CSS, JavaScript, indexedDb, Service-Workers, manifest.json, express.js, MongoDB, Mongoose',\n//       description: 'Having offline functionality is paramount to the success of an application that handles users’ financial information. This budget tracker application allows for offline access and functionality. The user will be able to add expenses and deposits to their budget with or without a connection. If the user enters transactions offline, the total should be updated when they are brought back online.',\n//       github: 'https://github.com/brookemadison/budget-tracker',\n//       deployed: 'https://lit-reaches-08410.herokuapp.com/'\n//     },\n//   ]);\n\n//   const [currentProject, setCurrentProject] = useState({});\n\n//   const [show, setShow] = useState(false);\n//   const handleShow = (currentProj) => {\n//     setCurrentProject(currentProj)\n//     setShow(true);\n//   };\n//   const handleClose = () => setShow(false);\n\n//   return (\n//     <div>\n//       {/* featured projects */}\n//       <div className=\"projects-wrapper\">\n//         {featuredProjects.map((project, i) => (\n//           <Button\n//             className=\"project-button\"\n//             variant=\"link\"\n//             onClick={() => { handleShow(featuredProjects[i]) }}\n//           >\n//             <img\n//               src={require(`../../assets/projects/${i}.png`).default}\n//               alt={project.name}\n//               className=\"project-image featured-project\"\n//               key={project.name}\n//             />\n//             <div class=\"project-label\">\n//               <h6 className=\"label-title\">{project.name}</h6>\n//               <p className=\"label-description\">{project.shortdesc}</p>\n//               <p className=\"label-read-more\">Click to Read More</p>\n//             </div>\n\n//           </Button>\n//         ))}\n//       </div>\n//       {/* non-featured-projects */}\n//       <div className=\"projects-wrapper\">\n//         {nonFeaturedProjects.map((project, i) => (\n//           <Button\n//             className=\"project-button\"\n//             variant=\"link\"\n//             onClick={() => { handleShow(nonFeaturedProjects[i]) }}\n//           >\n//             <img\n//               src={require(`../../assets/projects/${project.index}.png`).default}\n//               alt={project.name}\n//               className=\"project-image\"\n//               key={project.name}\n//             />\n//             <div class=\"project-label small-label\">\n//               <h6 className=\"label-title\">{project.name}</h6>\n//               <p className=\"label-description\">{project.shortdesc}</p>\n//               <p className=\"label-read-more\">Click to Read More</p>\n//             </div>\n\n//           </Button>\n//         ))}\n//       </div>\n//       {show ? <Modal currentProject={currentProject} onClose={handleClose} /> : null}\n//     </div>\n//   )\n// }\n\n// export default Project;\n\n\nimport React, { useState, useCallback, useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Lightbox from \"../Modal/index\";\n\nconst Grid = ({\n  images,\n  rowHeight,\n  margin = 0,\n  width,\n  isLightboxEnabled = true\n}) => {\n  const [showLightbox, setShowLightbox] = useState(false);\n  const [selectedIndex, setSelectedIndex] = useState();\n\n  const handleImageClick = e => {\n    setSelectedIndex(e.target.getAttribute(\"data-index\"));\n    setShowLightbox(true);\n  };\n\n  // Creates <img/> tags from image and row metadata.\n  //\n  const imageDataToImgTag = useCallback(\n    (image, totalIndex, rowIndex, row, imageWidth) => {\n      const calculatedRowHeight = width / imageWidth;\n\n      // Calculate the dimensions and margin of each image. This needs\n      // to be inline since we need some values from the JS.\n      let imageStyle = {\n        height: calculatedRowHeight + \"px\",\n\n        // Take back out the margin from the ratio.\n        width: calculatedRowHeight * image[1] - margin + \"px\",\n\n        // Don't add margin to the last item in a row\n        marginRight: rowIndex === row.length - 1 ? 0 : margin + \"px\"\n      };\n      return (\n        <img\n          className={`grid-img ${isLightboxEnabled ? \"lightbox-enabled\" : \"\"}`}\n          style={imageStyle}\n          data-index={totalIndex}\n          onClick={isLightboxEnabled ? handleImageClick : undefined}\n          src={image[0].src}\n          alt={image[0].alt}\n          key={\"img_\" + image[0].id + \"_\" + image[1]}\n        />\n      );\n    },\n    [margin, width, isLightboxEnabled]\n  );\n\n  // Build the rows of the grid. Each row must have an aspect ratio of at least minAspectRatio.\n  // Then, each image in the row is scaled up to fill the desired width of the row, while maintaining\n  // the aspect ratio of each photo in the row.\n  const rows = useMemo(() => {\n    let allRows = [];\n    let row = [];\n    let widthSoFar = 0;\n\n    // We'll use this value to calculate how many pictures we need in a row.\n    // The \"min\" aspect ratio is the aspect ratio that will allow the row to\n    // span the correct length while being between minRowHeight and maxRowHeight\n    const minAspectRatio = width / rowHeight;\n\n    for (let i = 0; i < images.length; i++) {\n      let image = images[i];\n\n      // Add the margin into the ratio.\n      let ratio = image.width / image.height;\n\n      // If we're less than the min aspectRatio then keep adding more items to the row.\n      if (widthSoFar <= minAspectRatio && i !== images.length - 1) {\n        // Add the ratio contributed by the margin.\n        ratio += margin / image.height;\n        row.push([image, ratio]);\n        widthSoFar += ratio;\n      } else {\n        if (i === images.length - 1) {\n          row.push([image, ratio]);\n          widthSoFar += ratio;\n        }\n        let imageElements = [];\n        for (let j = 0; j < row.length; j++) {\n          imageElements.push(\n            imageDataToImgTag(row[j], i - row.length + j, j, row, widthSoFar)\n          );\n        }\n        // Add the finished row to the list of all rows.\n        allRows.push(imageElements);\n\n        // Start a new row with the current image as the first image\n        row = [[image, ratio]];\n        widthSoFar = ratio;\n      }\n    }\n\n    // This style also needs to be inline since we use the padding prop.\n    // (Would be nice to use something like styled-components for this instead)\n    const divStyle = {\n      display: \"flex\",\n      marginBottom: margin + \"px\"\n    };\n    return allRows.map((row, index) => (\n      <div className=\"grid-row\" style={divStyle} key={\"row_\" + index}>\n        {row}\n      </div>\n    ));\n  }, [width, imageDataToImgTag, images, margin, rowHeight]);\n\n  const handleClose = useCallback(() => {\n    setShowLightbox(false);\n  }, []);\n\n  const handlePrev = useCallback(() => {\n    setSelectedIndex(\n      selectedIndex => (+selectedIndex - 1 + images.length) % images.length\n    );\n  }, [images.length]);\n\n  const handleNext = useCallback(() => {\n    setSelectedIndex(selectedIndex => (+selectedIndex + 1) % images.length);\n  }, [images.length]);\n\n  return (\n    <>\n      <div className=\"grid-container\">{rows}</div>\n      {showLightbox ? (\n        <Lightbox\n          selectedImage={images[selectedIndex]}\n          onClose={handleClose}\n          onPrev={handlePrev}\n          onNext={handleNext}\n        />\n      ) : null}\n    </>\n  );\n};\n\nGrid.propTypes = {\n  images: PropTypes.arrayOf(\n    PropTypes.shape({\n      src: PropTypes.string.isRequired,\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired\n    })\n  ).isRequired,\n  rowHeight: PropTypes.number.isRequired,\n  margin: PropTypes.number,\n  isLightboxEnabled: PropTypes.bool\n};\n\nexport default Grid;"]},"metadata":{},"sourceType":"module"}