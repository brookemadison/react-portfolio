{"ast":null,"code":"// import React, { useState } from \"react\";\n// import Modal from '../Modal';\n// import { Button } from 'react-bootstrap'\n// function Project({ category }) {\n//   const [featuredProjects] = useState([\n//     {\n//       index: 0,\n//       name: 'Project Three',\n//       shortdesc: 'Coming soon..',\n//       tech: 'HTML, CSS, JavaScript, Node.js, Express.js, MongoDB, Mongoose ODM, GraphQL, JWT, Heroku',\n//       description: 'description coming soon',\n//       github: 'https://github.com/brookemadison/',\n//     },\n//     {\n//       index: 1,\n//       name: 'Decide Eat',\n//       shortdesc: 'Decide what to eat, drink, and listen to on your date night',\n//       tech: 'HTML, CSS, JavaScript, jQuery, Bulma, Spoonacular API, Spotify API',\n//       description: 'Decide Eat was crafted to offer a unique experience on date night in. This app will elevate your date night by bringing the fun to the comfort of your home. Remove the stress of deciding by taking the quiz that pairs you with a recipe, cocktail, and music playlist recommendation.',\n//       github: 'https://github.com/Padredilg/decide-eat',\n//       deployed: 'https://padredilg.github.io/decide-eat/'\n//     },\n//     {\n//       index: 2,\n//       name: 'Pokedex',\n//       shortdesc: 'An online Pokédex that allows users to view and search for their favorite original 151 Pokémon.',\n//       tech: 'HTML, CSS, JavaScript, Node.js, Express.js, MySQL, dotenv, Heroku, JawsDB, Sequeliz, Bcrypt, express-session, Handlebars, animate.css, PokéAPI',\n//       description: 'The user MUST create an account first by username, email and password. The password MUST be at least 10 characters long. Once logged in, the user is then sent to the dashboard where they are presented with a search form. In this form they may type in the name of any of the original 151 Pokémon. Once the data is sent, the result brings up a card. The Pokémon stats will display along with the username written on the card. Congratulations! You caught your first Pokémon! To do another search simply click on the dashboard button. When you have finished your hunt, you may hit the logout button!',\n//       github: 'https://github.com/Lightfooted/pokedex-project',\n//       deployed: 'https://protected-hamlet-00069.herokuapp.com/'\n//     },\n//   ]);\n//   const [nonFeaturedProjects] = useState([\n//     {\n//       index: 3,\n//       name: 'Budget Tracker',\n//       shortdesc: 'A budget tracker that can be used without an internet connection',\n//       tech: 'HTML, CSS, JavaScript, indexedDb, Service-Workers, manifest.json, express.js, MongoDB, Mongoose',\n//       description: 'Having offline functionality is paramount to the success of an application that handles users’ financial information. This budget tracker application allows for offline access and functionality. The user will be able to add expenses and deposits to their budget with or without a connection. If the user enters transactions offline, the total should be updated when they are brought back online.',\n//       github: 'https://github.com/brookemadison/budget-tracker',\n//       deployed: 'https://lit-reaches-08410.herokuapp.com/'\n//     },\n//   ]);\n//   const [currentProject, setCurrentProject] = useState({});\n//   const [show, setShow] = useState(false);\n//   const handleShow = (currentProj) => {\n//     setCurrentProject(currentProj)\n//     setShow(true);\n//   };\n//   const handleClose = () => setShow(false);\n//   return (\n//     <div>\n//       {/* featured projects */}\n//       <div className=\"projects-wrapper\">\n//         {featuredProjects.map((project, i) => (\n//           <Button\n//             className=\"project-button\"\n//             variant=\"link\"\n//             onClick={() => { handleShow(featuredProjects[i]) }}\n//           >\n//             <img\n//               src={require(`../../assets/projects/${i}.png`).default}\n//               alt={project.name}\n//               className=\"project-image featured-project\"\n//               key={project.name}\n//             />\n//             <div class=\"project-label\">\n//               <h6 className=\"label-title\">{project.name}</h6>\n//               <p className=\"label-description\">{project.shortdesc}</p>\n//               <p className=\"label-read-more\">Click to Read More</p>\n//             </div>\n//           </Button>\n//         ))}\n//       </div>\n//       {/* non-featured-projects */}\n//       <div className=\"projects-wrapper\">\n//         {nonFeaturedProjects.map((project, i) => (\n//           <Button\n//             className=\"project-button\"\n//             variant=\"link\"\n//             onClick={() => { handleShow(nonFeaturedProjects[i]) }}\n//           >\n//             <img\n//               src={require(`../../assets/projects/${project.index}.png`).default}\n//               alt={project.name}\n//               className=\"project-image\"\n//               key={project.name}\n//             />\n//             <div class=\"project-label small-label\">\n//               <h6 className=\"label-title\">{project.name}</h6>\n//               <p className=\"label-description\">{project.shortdesc}</p>\n//               <p className=\"label-read-more\">Click to Read More</p>\n//             </div>\n//           </Button>\n//         ))}\n//       </div>\n//       {show ? <Modal currentProject={currentProject} onClose={handleClose} /> : null}\n//     </div>\n//   )\n// }\n// export default Project;\nexport default Project;","map":{"version":3,"sources":["/Users/brookemadison/Desktop/ucf-bootcamp/react-portfolio/src/components/Project/index.js"],"names":["Project"],"mappingseAAeA,OAAf","sourcesContent":["// import React, { useState } from \"react\";\n// import Modal from '../Modal';\n// import { Button } from 'react-bootstrap'\n\n// function Project({ category }) {\n//   const [featuredProjects] = useState([\n//     {\n//       index: 0,\n//       name: 'Project Three',\n//       shortdesc: 'Coming soon..',\n//       tech: 'HTML, CSS, JavaScript, Node.js, Express.js, MongoDB, Mongoose ODM, GraphQL, JWT, Heroku',\n//       description: 'description coming soon',\n//       github: 'https://github.com/brookemadison/',\n//     },\n//     {\n//       index: 1,\n//       name: 'Decide Eat',\n//       shortdesc: 'Decide what to eat, drink, and listen to on your date night',\n//       tech: 'HTML, CSS, JavaScript, jQuery, Bulma, Spoonacular API, Spotify API',\n//       description: 'Decide Eat was crafted to offer a unique experience on date night in. This app will elevate your date night by bringing the fun to the comfort of your home. Remove the stress of deciding by taking the quiz that pairs you with a recipe, cocktail, and music playlist recommendation.',\n//       github: 'https://github.com/Padredilg/decide-eat',\n//       deployed: 'https://padredilg.github.io/decide-eat/'\n//     },\n//     {\n//       index: 2,\n//       name: 'Pokedex',\n//       shortdesc: 'An online Pokédex that allows users to view and search for their favorite original 151 Pokémon.',\n//       tech: 'HTML, CSS, JavaScript, Node.js, Express.js, MySQL, dotenv, Heroku, JawsDB, Sequeliz, Bcrypt, express-session, Handlebars, animate.css, PokéAPI',\n//       description: 'The user MUST create an account first by username, email and password. The password MUST be at least 10 characters long. Once logged in, the user is then sent to the dashboard where they are presented with a search form. In this form they may type in the name of any of the original 151 Pokémon. Once the data is sent, the result brings up a card. The Pokémon stats will display along with the username written on the card. Congratulations! You caught your first Pokémon! To do another search simply click on the dashboard button. When you have finished your hunt, you may hit the logout button!',\n//       github: 'https://github.com/Lightfooted/pokedex-project',\n//       deployed: 'https://protected-hamlet-00069.herokuapp.com/'\n//     },\n//   ]);\n//   const [nonFeaturedProjects] = useState([\n//     {\n//       index: 3,\n//       name: 'Budget Tracker',\n//       shortdesc: 'A budget tracker that can be used without an internet connection',\n//       tech: 'HTML, CSS, JavaScript, indexedDb, Service-Workers, manifest.json, express.js, MongoDB, Mongoose',\n//       description: 'Having offline functionality is paramount to the success of an application that handles users’ financial information. This budget tracker application allows for offline access and functionality. The user will be able to add expenses and deposits to their budget with or without a connection. If the user enters transactions offline, the total should be updated when they are brought back online.',\n//       github: 'https://github.com/brookemadison/budget-tracker',\n//       deployed: 'https://lit-reaches-08410.herokuapp.com/'\n//     },\n//   ]);\n\n//   const [currentProject, setCurrentProject] = useState({});\n\n//   const [show, setShow] = useState(false);\n//   const handleShow = (currentProj) => {\n//     setCurrentProject(currentProj)\n//     setShow(true);\n//   };\n//   const handleClose = () => setShow(false);\n\n//   return (\n//     <div>\n//       {/* featured projects */}\n//       <div className=\"projects-wrapper\">\n//         {featuredProjects.map((project, i) => (\n//           <Button\n//             className=\"project-button\"\n//             variant=\"link\"\n//             onClick={() => { handleShow(featuredProjects[i]) }}\n//           >\n//             <img\n//               src={require(`../../assets/projects/${i}.png`).default}\n//               alt={project.name}\n//               className=\"project-image featured-project\"\n//               key={project.name}\n//             />\n//             <div class=\"project-label\">\n//               <h6 className=\"label-title\">{project.name}</h6>\n//               <p className=\"label-description\">{project.shortdesc}</p>\n//               <p className=\"label-read-more\">Click to Read More</p>\n//             </div>\n\n//           </Button>\n//         ))}\n//       </div>\n//       {/* non-featured-projects */}\n//       <div className=\"projects-wrapper\">\n//         {nonFeaturedProjects.map((project, i) => (\n//           <Button\n//             className=\"project-button\"\n//             variant=\"link\"\n//             onClick={() => { handleShow(nonFeaturedProjects[i]) }}\n//           >\n//             <img\n//               src={require(`../../assets/projects/${project.index}.png`).default}\n//               alt={project.name}\n//               className=\"project-image\"\n//               key={project.name}\n//             />\n//             <div class=\"project-label small-label\">\n//               <h6 className=\"label-title\">{project.name}</h6>\n//               <p className=\"label-description\">{project.shortdesc}</p>\n//               <p className=\"label-read-more\">Click to Read More</p>\n//             </div>\n\n//           </Button>\n//         ))}\n//       </div>\n//       {show ? <Modal currentProject={currentProject} onClose={handleClose} /> : null}\n//     </div>\n//   )\n// }\n\n// export default Project;\n\n\n\nexport default Project;"]},"metadata":{},"sourceType":"module"}